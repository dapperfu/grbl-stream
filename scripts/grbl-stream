#!/usr/bin/env python
import curses
import time
import six
import copy
import argparse
import re
import threading
import serial
from distutils.version import LooseVersion


for pygcode_lib_type in ('installed_lib', 'relative_lib'):
    # Library is preferably imported from predefined path, otherwise local
    # development path is attempted (done to make development easier)
    try:
        # pygcode
        import pygcode
        from pygcode import NullMachine
        from pygcode import GCodeRapidMove
        from pygcode import GCodeIncrementalDistanceMode
        from pygcode import text2gcodes
        from pygcode import Line

    except ImportError:
        # Add pygcode (relative to this test-path) to the system path
        if pygcode_lib_type == 'installed_lib':
            import sys, os, inspect
            _this_path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
            sys.path.insert(0, os.path.join(_this_path, '..', '..', 'pygcode', 'src'))
            continue # import was attempted before sys.path addition. retry import
        raise # otherwise the raised ImportError is a genuine problem
    break


for grblstream_lib_type in ('installed_lib', 'relative_lib'):
    # Library is preferably imported from predefined path, otherwise local
    # development path is attempted (done to make development easier)
    try:
        # grblstream
        import grblstream
        from grblstream.window import keypress, using_curses
        from grblstream.config import Config
        from grblstream.config import DEFAULT_FILENAME
        from grblstream.streamer import GCodeStreamException

    except ImportError:
        # Add pygcode (relative to this test-path) to the system path
        if grblstream_lib_type == 'installed_lib':
            import sys, os, inspect
            _this_path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
            sys.path.insert(0, os.path.join(_this_path, '..', 'src'))
            continue # import was attempted before sys.path addition. retry import
        raise # otherwise the raised ImportError is a genuine problem
    break


# ---------------- Parse Arguments -------------------
parser = argparse.ArgumentParser(
    description="GRBL gcode streamer for CNC machine. Assist jogging to "
                "position, then stream gcode via serial.",
)

parser.add_argument(
    'infile', help="gcode file to stream",
)

parser.add_argument(
    '--settings', '-s', dest='settings_file', default=None,
    help="settings json file (default: %s)" % grblstream.settingsfile.DEFAULT_FILENAME,
)

# Action
group = parser.add_argument_group("Streaming Actions")
group.add_argument(
    '--keep-open', '-o', dest='keep_open',
    action='store_const', const=True, default=None,
    help="if set, window won't close when job is done",
)
group.add_argument(
    '--nojogging', dest='interactive_jogging',
    action='store_const', const=False, default=None,
    help="bypass jogging state; jump straight into streaming",
)
group.add_argument(
    '--split-gcodes', dest='split_gcodes',
    action='store_const', const=True, default=None,
    help="multiple gcodes per line will be split and streamed in order of execution",
)

# Serial Connection
group = parser.add_argument_group("Serial Connectivity")
group.add_argument(
    '-d', '--device', dest='serial_device', default=None,
    type=grblstream.arduino_tools.device_type,
    help="serial device GRBL is connected to, can use direct device name "
         "(eg: /dev/ttyACM0) or the Arduino's serial number (eg: 55639303235351C071B0)"
)
group.add_argument(
    '-b', '--baudrate', dest='serial_baudrate', type=int, default=None,
    help="serial baud rate"
)

# Debugging
group = parser.add_argument_group("Debug Parameters")
group.add_argument(
    '--logfile', dest='serial_log_file', default=None, metavar="LOG_FILE",
    help="if given, data read from, and written to serial port is logged here "
         "(note: \\r and \\n characters are escaped for debugging purposes)",
)
#group.add_argument(
#    '--nocurses', dest='no_curses',
#    action='store_const', const=True, default=False,
#)

args = parser.parse_args()

# ----- Import Settings
config = Config(args, args.settings_file)


# ----------------- Mainline -----------------
# main() is called as soon as it's defined, this is necessary because it
# uses a curses.wrapper (well, sort of, I made my own to be cleaner)
@using_curses
def main(screen):

    # ----------------- Initialise widgets 'n' stuff -----------------
    # Clear screen
    screen.clear()
    screen.refresh()


    status = grblstream.window.StatusWindow(screen=screen)
    init = grblstream.window.InitWindow(
        screen=screen,
        title='Initialize Device: {}'.format(config.serial_device),
        min_height=1,
    )
    jogging = grblstream.window.JoggingWindow(
        screen=screen,
        title='Jogging',
        min_height=1,
    )
    stream = grblstream.window.StreamWindow(
        screen=screen,
        title='Stream: {}'.format(config.infile),
        min_height=min(6, config.stream_pending_count + 1),
    )
    accordion = grblstream.window.AccordionWindowManager(
        screen=screen,
        windows=[init, jogging, stream],
        header_height=status.window.getmaxyx()[0],
    )

    # dump first few lines into stream window
    with open(config.infile, 'r') as fh:
        for i in range(config.stream_pending_count):
            line = fh.readline().rstrip()
            stream.add_line(line)
        stream.add_line('... [truncated]')


    # ----------------- Virtual Machine -----------------
    machine = NullMachine()

    # Detect & Set Machine's Mode from GRBL text
    machine_mode_regex = re.compile(r'^\s*\[GC:\s*(?P<gcode>[^\]]+)\]\s*$', re.I)
    def machine_set_mode(mode_match):
        machine.set_mode(*text2gcodes(mode_match.group('gcode')))

    # Detect & Set Machine's State from GRBL text
    machine_state_regex = re.compile(r'^\s*<(?P<state>[^\>\<]*)>\s*$')
    def machine_set_state(state_match):
        # <Idle|MPos:0.000,0.000,0.000|FS:0,0|WCO:-8.393,100.000,2.063>
        feed_rate = None # float
        spindle = None  # float
        abs_pos = None  # Position
        work_pos = None  # Position
        work_offset = None  # Position

        coords = lambda s: [float(x) for x in s[s.find(':')+1:].split(',')]
        pos = lambda s: machine.Position(**dict(zip('XYZ', coords(s))))
        for (i, state_str) in enumerate(state_match.group('state').split('|')):
            if i == 0:
                status.set_status(state_str)
            elif state_str.startswith('MPos:'): # machine.abs_pos
                abs_pos = pos(state_str)
            elif state_str.startswith('WPos:'): # machine.pos
                work_pos = pos(state_str)
            elif state_str.startswith('F:'):
                (feed_rate,) = coords(state_str)
            elif state_str.startswith('FS:'):
                (feed_rate, spindle) = coords(state_str)
            elif state_str.startswith('WCO:'): # machine.state.coord_sys.offset
                work_offset = pos(state_str)

        # Update Machine Axes
        if work_offset is not None:
            machine.state.coord_sys.offset = work_offset  # done first
        if abs_pos is not None:
            machine.abs_pos = abs_pos
        if work_pos is not None:
            machine.pos = work_pos

        # Update Status Display
        status.widgets['MPosX'].value = machine.abs_pos.X
        status.widgets['MPosY'].value = machine.abs_pos.Y
        status.widgets['MPosZ'].value = machine.abs_pos.Z
        status.widgets['WPosX'].value = machine.pos.X
        status.widgets['WPosY'].value = machine.pos.Y
        status.widgets['WPosZ'].value = machine.pos.Z
        if feed_rate is not None:
            status.widgets['feed_rate'].text = "%g" % feed_rate
        if spindle is not None:
            spindle_str = ('%g (rpm)' % spindle) if spindle else 'off'
            status.widgets['spindle'].text = spindle_str

        status.refresh()


    # ----------------- Initialize Serial -----------------

    # Initialize & Wake up grbl
    serialport = grblstream.streamer.SerialPort(
        config.serial_device,
        config.serial_baudrate,
        config.serial_log_file if config.serial_logging else None
    )
    serialport.write("\r\n\r\n")

    # Wait for grbl to initialize and flush startup text in serial input
    accordion.focus = init
    init_completed = False
    for line in serialport.readlines(timeout=5):
        line = line.strip()
        if line and (line != 'ok'):
            init.add_line(line)

        # Process line
        mode_match = machine_mode_regex.search(line)
        state_match = machine_state_regex.search(line)
        if re.search(r'^GRBL', line, re.I):
            # Request: Mode - Request Machine's Mode
            serialport.write('$I\n')
        elif re.search(r'^\[VER:.*\]$', line, re.I):
            serialport.write('$G\n')
        elif mode_match:
            # Received: Mode - Machine's Mode received, pass to virtual machine
            machine_set_mode(mode_match)
            # Request: State
            serialport.write('?')
        elif state_match:
            # Received: State
            machine_set_state(state_match)
            init_completed = True
            break

    if init_completed:
        serialport.serial.flushInput()
    else:
        raise RuntimeError("Could not initialize GRBL serial interface")

    # Machine state initialized, remember it.
    #   machine's mode may be altered while jogging.
    #   machine's mode is duplicated so it may be reverted after jogging
    init_machine = copy.copy(machine)

    # Start period polling of status
    poll_daemon_keepalive = True
    poll_daemon_thread = None
    if config.status_polling and config.status_poll_interval:
        def _poll_daemon_runtime():
            while poll_daemon_keepalive:
              serialport.write('?')
              time.sleep(config.status_poll_interval)
        poll_daemon_thread = threading.Thread(target=_poll_daemon_runtime)
        poll_daemon_thread.daemon = True
        poll_daemon_thread.start()


    # Serial Polling Process
    message_regex = re.compile(r'^\s*\[(?P<msg>.*)\]\s*$')
    def poll_serial(timeout, callback=None):
        for line in serialport.readlines(timeout=0.05):
            line = line.rstrip('\r\n').lstrip('\r\n')
            state_match = machine_state_regex.search(line)
            message_match = message_regex.search(line)
            #jogging.add_line("%s : %s" % (line, "state" if state_match else "dunno"))
            if state_match: # Received: State
                machine_set_state(state_match)
            elif message_match:
                # TODO: how to display messages
                pass
            else:
                try:
                    streamer.process_response(line)
                except GCodeStreamException as e:
                    serialport.write('!')  # Feed Hold
                    #accordion.focus.insert_line('error!')
                    #raise  # FIXME: error while streaming, option to retry?

                if callback:
                    callback()

    def _poll_callback_jogging():
        jogging.render()
        jogging.refresh()

    def _poll_callback_streaming():
        jogging.render()
        jogging.refresh()
        stream.render()
        stream.refresh()


    # Connect GCode Streamer
    streamer = grblstream.streamer.GCodeStreamer(serialport, config.grbl_buffer_size)

    def send_gcode(gcode, window, tree_chr=None, send=True):
        widget = window.add_line(str(gcode), tree_chr=tree_chr)
        line = grblstream.streamer.GCodeStreamer.Line(str(gcode), widget)
        if line and send: # don't send blank lines
            streamer.send(line)

    # ----------------- Interactive Jogging -----------------
    if config.show_tips and config.interactive_jogging:
        help_lines = [
            "; Jogging Keys",
            ";    - Arrow Keys: X/Y axes",
            ";    - PgUp/PgDn: Z axis",
            ";    - []: increase/decrease jog distance",
            ";    - Space: zero work offsets (all axes)",
            ";    - x,y,z: zero individual axis",
            ";    - Enter: start streaming gcode",
        ]
        for line in help_lines:
            jogging.add_line(line)
    accordion.focus = jogging

    screen.nodelay(True) # non-blocking .getkey() behaviour

    stream_file_flag = True

    while config.interactive_jogging:
        k = keypress(screen)

        if k is None:
            pass  # nothing pressed; do nothing
        else:
            # Process key-press...
            if k in tuple('qQ'):
                stream_file_flag = False  # don't continue with stream
                break
            elif k == '?':
                serialport.write('?')

            # Jogging Keys
            elif k in ["KEY_RIGHT", "KEY_LEFT", "KEY_UP", "KEY_DOWN", "KEY_PPAGE", "KEY_NPAGE"]:
                # put machine into incremental mode (if it's not already)
                if not isinstance(machine.mode.distance, GCodeIncrementalDistanceMode):
                    dist_mode = GCodeIncrementalDistanceMode()
                    send_gcode(dist_mode, jogging)
                    machine.process_gcodes(dist_mode)  # changes machine's mode

                if k == "KEY_RIGHT":
                    send_gcode(GCodeRapidMove(X=status.widgets['jog'].value), jogging)
                    status.widgets['X+'].flash()
                elif k == "KEY_LEFT":
                    send_gcode(GCodeRapidMove(X=-status.widgets['jog'].value), jogging)
                    status.widgets['X-'].flash()
                elif k == "KEY_UP":
                    send_gcode(GCodeRapidMove(Y=status.widgets['jog'].value), jogging)
                    status.widgets['Y+'].flash()
                elif k == "KEY_DOWN":
                    send_gcode(GCodeRapidMove(Y=-status.widgets['jog'].value), jogging)
                    status.widgets['Y-'].flash()
                elif k == "KEY_PPAGE":
                    send_gcode(GCodeRapidMove(Z=status.widgets['jog'].value), jogging)
                    status.widgets['Z+'].flash()
                elif k == "KEY_NPAGE":
                    send_gcode(GCodeRapidMove(Z=-status.widgets['jog'].value), jogging)
                    status.widgets['Z-'].flash()

            # Jogging Increment (up/down)
            elif k in tuple('[]'):
                cur_val = status.widgets['jog'].value
                dindex = {'[': 1, ']': -1}[k]
                try:
                    i = config.jogging_values.index(cur_val)
                except ValueError:
                    i = 0
                i = max(0, min(i + dindex, len(config.jogging_values) - 1))
                status.widgets['jog'].value = config.jogging_values[i]

            # Zeroing Axes Offsets
            elif k == ' ':
                # Zero WPos coordinates (all xyz)
                send_gcode(GCodeSet(L=20, P=1, X=0, Y=0, Z=0), jogging)
            elif k in tuple('xXyYzZ'):
                # Zero WPos coordinate (single axis)
                send_gcode(GCodeSet(L=20, P=1, **{k: 0}), jogging)

            # Jogging complete, begin stream
            elif k == '\n':
                break

            # dummy keypress on console window resize
            elif k == 'KEY_RESIZE':
                accordion.update_distrobution()
                status.render()

            status.refresh()

        # spend 50ms processing received serial lines
        #   then loop back up to process another key
        poll_serial(0.05, _poll_callback_jogging)

        streamer.poll_transmission()

    # Revert machine's state after jogging
    mode_keys = set()
    mode_keys |= set(init_machine.mode.modal_groups.keys())
    mode_keys |= set(machine.mode.modal_groups.keys())

    for key in mode_keys:
        initial = init_machine.mode.modal_groups[key]
        current = machine.mode.modal_groups[key]
        if initial != current:
            send_gcode(initial, jogging)


    # ----------------- File Streaming -----------------
    stream.clear()
    accordion.focus = stream


    def _check_resize():
        if keypress(screen) == 'KEY_RESIZE':
            accordion.update_distrobution()
            status.render()
            status.refresh()

    if stream_file_flag:
        with open(config.infile, 'r') as gcode_file:
            gcode_file_moredata = True
            while gcode_file_moredata:
                # Push pending lines into streamer
                while streamer.pending_count < config.stream_pending_count:
                    # Line from file
                    line_data = gcode_file.readline()
                    if not line_data:
                        gcode_file_moredata = False
                        break  # file's done

                    # Break into multiple gcodes (if applicable)
                    if config.split_gcodes:
                        gcode_line = Line(line_data)

                        if len(gcode_line.block) > 1:
                            # full line (as comment; not sent over serial)
                            send_gcode(line_data.strip(), stream, send=False)
                            # individual gcodes
                            gcode_list = copy.copy(sorted(gcode_line.block.gcodes))
                            if gcode_line.block.modal_params:
                                gcode_list.append(' '.join(str(w) for w in gcode_line.block.modal_params))
                            for (i, gcode) in enumerate(gcode_list):  # sorts by execution order
                                send_gcode(
                                    gcode, stream,
                                    tree_chr=curses.ACS_LTEE if ((i + 1) < len(gcode_list)) else curses.ACS_LLCORNER
                                )
                        else:
                            # 0 or 1 gcodes found, just treat it like normal
                            send_gcode(line_data.strip(), stream)
                    else:
                        send_gcode(line_data.strip(), stream)

                # process serial packets, then try again
                poll_serial(0.05, _poll_callback_streaming)

                _check_resize()

        # streamer is still:
        #   - sending gcodes to GRBL
        #   - processing GRBL's responses in confirmation of those codes
        while not streamer.finished:
            # process serial packets, then try again
            poll_serial(0.05, _poll_callback_streaming)
            _check_resize()

        # Machine is still working, wait 'till it's Idle
        while not status.is_idle:
            # process serial packets, then try again
            poll_serial(0.05, _poll_callback_streaming)
            _check_resize()


    # ---- Kill status polling daemon
    poll_daemon_keepalive = False  # kills polling daemon (if running)
    if poll_daemon_thread:
        poll_daemon_thread.join()  # blocks until daemon is complete
    serialport.serial.flushInput()

    if stream_file_flag:
        while config.keep_open:
            if keypress(screen) in tuple('qQ\n'):
                break
            time.sleep(0.1)

if __name__ == "__main__":
    main()
